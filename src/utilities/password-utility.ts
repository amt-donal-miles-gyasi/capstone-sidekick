import generator from 'generate-password';
import bcrypt from 'bcrypt';

/**
 * Automatically generates a password using specified criteria.
 *
 * @type {string} - The auto-generated password.
 */
export const autoGeneratePassword: string = generator.generate({
  length: 8,
  numbers: true,
  symbols: true,
  uppercase: true,
  lowercase: true,
  strict: true,
});

const saltRounds = 10; // Number of salt rounds to use for hashing

/**
 * Hashes the given password using bcrypt.
 *
 * @param {string} autoGeneratedPassword - The password to hash.
 * @returns {Promise<string>} - A Promise that resolves to the hashed password.
 * @throws {Error} - Throws an error if there's an error hashing the password.
 */
export const hashPassword = async (autoGeneratedPassword: string): Promise<string> => {
  try {
    const salt = await bcrypt.genSalt(saltRounds);
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, salt);
    return hashedPassword;
  } catch (error) {
    throw new Error('Error hashing password');
  }
};
